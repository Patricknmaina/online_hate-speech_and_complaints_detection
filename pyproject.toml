[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "online-hate-speech-detection"
dynamic = ["version"]
description = "Online Hate Speech and Complaint Detection for Safaricom using ML and NLP"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
authors = [
    {name = "Patrick Maina", email = "patricknmaina364@gmail.com"},
]
maintainers = [
    {name = "Patrick Maina", email = "patricknmaina364@gmail.com"},
]
keywords = ["NLP", "Transformers", "Sentiment Analysis", "Hate-Speech Detection"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
]

# Core dependencies
dependencies = [
    "torch",
    "pandas",
    "numpy",
    "matplotlib",
    "seaborn",
    "nltk",
    "transformers",
    "datasets",
    "fastapi",
    "rasa",
    "scikit-learn",
    "plotly"
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.5",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings>=0.22.0",
]

# Testing dependencies
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "httpx>=0.24.0",
    "pytest-mock>=3.10.0",
]

# Production deployment
prod = [
    "gunicorn>=21.0.0",
    "psycopg2>=2.9.0",
]

# Full installation (all optional dependencies)
all = [
    "online-hate-speech-detection[dev,docs,test,prod]",
]

[project.urls]
Homepage = "https://safarimeter-v2.netlify.app/"
Repository = "https://github.com/Patricknmaina/online_hate-speech_and_complaints_detection"
Documentation = "https://github.com/Patricknmaina/online_hate-speech_and_complaints_detection#readme"

[project.scripts]
hate-speech-train = "main:main"
hate-speech-api = "FastAPI.main:app"

[tool.setuptools]
packages = ["data_prep", "FastAPI", "AI_powered_chatbot", "train_scripts"]

[tool.setuptools.package-data]
"*" = ["*.yml", "*.yaml", "*.json", "*.pkl", "*.csv"]

[tool.setuptools_scm]
write_to = "_version.py"

# Black code formatting
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | models
  | data
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["data_prep", "FastAPI", "AI_powered_chatbot", "train_scripts"]
skip = ["migrations", "models", "data"]

# Flake8 linting (configuration in setup.cfg if needed)
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "models",
    "data",
    "*.egg-info",
]

# MyPy type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "numpy.*",
    "sklearn.*",
    "transformers.*",
    "torch.*",
    "tensorflow.*",
    "rasa.*",
    "plotly.*",
    "matplotlib.*",
    "seaborn.*",
    "nltk.*",
    "joblib.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "ml: marks tests as machine learning tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["data_prep", "FastAPI", "AI_powered_chatbot", "train_scripts"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/migrations/*",
    "*/venv/*",
    "*/models/*",
    "*/data/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "data", "models", "Frontend"]
skips = ["B101", "B601"]

# Pre-commit hooks configuration
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.4.0",
        hooks = [
            {id = "trailing-whitespace"},
            {id = "end-of-file-fixer"},
            {id = "check-yaml"},
            {id = "check-added-large-files"},
            {id = "check-merge-conflict"},
        ]
    },
    {
        repo = "https://github.com/psf/black",
        rev = "23.3.0",
        hooks = [{id = "black"}]
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.12.0",
        hooks = [{id = "isort"}]
    },
    {
        repo = "https://github.com/pycqa/flake8",
        rev = "6.0.0",
        hooks = [{id = "flake8"}]
    },
    {
        repo = "https://github.com/pre-commit/mirrors-mypy",
        rev = "v1.3.0",
        hooks = [{id = "mypy", additional_dependencies = ["types-all"]}]
    },
]